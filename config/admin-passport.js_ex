const passport = require('passport')
const LocalStrategy = require('passport-local')
const bcrypt = require('bcryptjs')
const { Admin } = require('../models')

if (process.env.NODE_ENV !== 'production') {
  require('dotenv').config()
}

// 設定管理員本地策略
passport.use('admin', new LocalStrategy(
  {
    usernameField: 'email',
    passwordField: 'password',
    passReqToCallback: true
  },
  (req, email, password, cb) => {
    Admin.findOne({
      where: { email },
      raw: true
    })
      .then(user => {
        console.log('admin', user)
        if (!user) return cb(null, false, req.flash('error_messages', '帳號或密碼輸入錯誤！'))

        bcrypt.compare(password, user.password).then(res => {
          if (!res) return cb(null, false, req.flash('error_messages', '帳號或密碼輸入錯誤！'))
          return cb(null, user)
        })
      })
      .catch(err => cb(err, false))
  }
))

// serialize and deserialize admin
passport.serializeUser((user, cb) => {
  cb(null, user.id)
})
passport.deserializeUser((id, cb) => {
  Admin.findByPk(id)
    .then(user => {
      console.log('user', user)
      user = user.toJSON()
      return cb(null, user)
    })
})

module.exports = passport
